name: CI — test → gate → release → post-release PR
on:
  push:
    branches:
      - '**'
    tags:
      - '**'
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

# Ensure only one workflow per ref is active at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

# Default, least-privilege token permissions; individual jobs elevate as needed
permissions:
  contents: read

jobs:
  test:
    name: Test (Node ${{ matrix.node-version }})
    # Skip CI only for the auto-generated Changesets "Version Packages" commit on push
    if: ${{ !(github.event_name == 'push' && (github.event.head_commit && contains(github.event.head_commit.message, 'Version Packages'))) }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [20.x, 22.x, 24.x]
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      # Install the pnpm CLI first so actions/setup-node can enable pnpm cache without error
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false
      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Run Tests
        run: pnpm test

  determine_release:
    name: Determine release eligibility
    needs: [test]
    permissions:
      contents: read
    runs-on: ubuntu-latest
    outputs:
      is_prerelease: ${{ steps.determine_release.outputs.is_prerelease }}
      is_release_branch: ${{ steps.determine_release.outputs.is_release_branch }}
      is_version_bump_commit: ${{ steps.determine_release.outputs.is_version_bump_commit }}
      should_release: ${{ steps.determine_release.outputs.should_release }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false
      - name: Setup Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: 24.x
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Determine release
        id: determine_release
        shell: bash
        env:
          GITHUB_REF_NAME: ${{ github.ref_name }}
          EVENT_NAME: ${{ github.event_name }}
          HEAD_SHA: ${{ github.sha }}
        run: |
          set -euo pipefail
          echo "Evaluating release eligibility for $EVENT_NAME on $GITHUB_REF_NAME at $HEAD_SHA"

          # Detect prerelease mode from changesets preState
          pnpm changeset status --output=changeset-status.json
          PRE_RELEASE_MODE=$(jq -r '.preState.mode // ""' changeset-status.json)
          IS_PRERELEASE=$([[ "$PRE_RELEASE_MODE" == 'pre' ]] && echo 'true' || echo 'false')
          echo "is_prerelease=$IS_PRERELEASE" >> "$GITHUB_OUTPUT"

          # Release branch gate (push to main only)
          IS_RELEASE_BRANCH=$([[ "$EVENT_NAME" == 'push' && "$GITHUB_REF_NAME" == 'main' ]] && echo 'true' || echo 'false')
          echo "is_release_branch=$IS_RELEASE_BRANCH" >> "$GITHUB_OUTPUT"

          # Heuristic: "Version Packages" commit indicator
          # Consider it a release-bump commit if either:
          #  - the head commit message mentions Version Packages, or
          #  - the diff from HEAD~1 contains a version field change in any package.json
          HEAD_MSG=$(git log -1 --pretty=%B)
          IS_MSG_BUMP=$([[ "$HEAD_MSG" =~ [Vv]ersion\ Packages ]] || [[ "$HEAD_MSG" =~ chore:\ version\ packages ]] && echo 'true' || echo 'false')

          DIFF_RANGE=$(git rev-parse --verify HEAD~1 >/dev/null 2>&1 && echo 'HEAD~1..HEAD' || echo 'HEAD')
          set +e
          git diff -U0 "$DIFF_RANGE" -- "**/package.json" | grep '"version"' >/dev/null
          IS_DIFF_BUMP=$([[ $? -eq 0 ]] && echo 'true' || echo 'false')
          set -e

          if [[ "$IS_MSG_BUMP" == 'true' || "$IS_DIFF_BUMP" == 'true' ]]; then
            IS_VERSION_BUMP_COMMIT='true'
          else
            IS_VERSION_BUMP_COMMIT='false'
          fi
          echo "is_version_bump_commit=$IS_VERSION_BUMP_COMMIT" >> "$GITHUB_OUTPUT"

          # Final gate: release only on push to main AND when commit contains version bumps
          if [[ "$IS_RELEASE_BRANCH" == 'true' && "$IS_VERSION_BUMP_COMMIT" == 'true' ]]; then
            SHOULD_RELEASE='true'
          else
            SHOULD_RELEASE='false'
          fi
          echo "should_release=$SHOULD_RELEASE" >> "$GITHUB_OUTPUT"

  release:
    name: Release
    needs: [test, determine_release]
    # Strict gate: only run on push to main when the commit is a version-bump commit
    if: needs.determine_release.outputs.should_release == 'true'
    permissions:
      contents: write
    runs-on: ubuntu-latest
    outputs:
      published: ${{ steps.publish.outputs.published }}
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: latest
          run_install: false
      - name: Setup Node.js 24
        uses: actions/setup-node@v4
        with:
          node-version: 24.x
          cache: 'pnpm'
          cache-dependency-path: pnpm-lock.yaml
          registry-url: https://registry.npmjs.org
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
      - name: Build
        run: pnpm build
      - name: Exit prerelease mode if applicable
        if: needs.determine_release.outputs.is_prerelease == 'true'
        run: |
          echo "Exiting prerelease mode on main branch"
          pnpm changeset pre exit
      - name: Publish packages
        id: publish
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          # Ensure npm publish has auth
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          set -euo pipefail
          echo "Publishing packages to npm..."
          pnpm changeset status
          pnpm changeset publish | tee publish.log
          if grep -q "Successfully published" publish.log; then
            echo "published=true" >> "$GITHUB_OUTPUT"
          else
            echo "published=false" >> "$GITHUB_OUTPUT"
          fi

  post_release_version_pr:
    name: Post-release — open/update Version Packages PR
    needs: [release]
    if: needs.release.result == 'success' && needs.release.outputs.published == 'true'
    permissions:
      contents: write
      pull-requests: write
    uses: ./.github/workflows/changesets-version-pr.yml
    secrets: inherit
